[{"D:\\Github\\music-player\\src\\index.js":"1","D:\\Github\\music-player\\src\\App.js":"2","D:\\Github\\music-player\\src\\components\\Player.js":"3","D:\\Github\\music-player\\src\\components\\Song.js":"4","D:\\Github\\music-player\\src\\util.js":"5","D:\\Github\\music-player\\src\\components\\Library.js":"6","D:\\Github\\music-player\\src\\components\\LibrarySong.js":"7"},{"size":197,"mtime":1611857566164,"results":"8","hashOfConfig":"9"},{"size":784,"mtime":1611927901296,"results":"10","hashOfConfig":"9"},{"size":3473,"mtime":1611871175188,"results":"11","hashOfConfig":"9"},{"size":1585,"mtime":1611866759894,"results":"12","hashOfConfig":"9"},{"size":3285,"mtime":1611922166848,"results":"13","hashOfConfig":"9"},{"size":1064,"mtime":1611935868794,"results":"14","hashOfConfig":"9"},{"size":1618,"mtime":1611935545188,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1b8ep7t",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Github\\music-player\\src\\index.js",[],["34","35"],"D:\\Github\\music-player\\src\\App.js",["36","37"],"import React from \"react\";\n// components\nimport Song from \"./components/Song\";\nimport Player from \"./components/Player\";\nimport Library from \"./components/Library\";\nimport { CssBaseline, Grid } from \"@material-ui/core\";\n// util\nimport data from \"./util\";\n\nfunction App() {\n  const [songs, setSongs] = React.useState(data());\n  const [currentSong, setCurrentSong] = React.useState(songs[0]);\n  const [isPlaying, setIsPlaying] = React.useState(false);\n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Grid>\n        <Song currentSong={currentSong} />\n        <Player\n          currentSong={currentSong}\n          isPlaying={isPlaying}\n          setIsPlaying={setIsPlaying}\n        />\n      </Grid>\n      <Library songs={songs} />\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Github\\music-player\\src\\components\\Player.js",["38","39"],"import React from \"react\";\r\nimport { Grid, Typography, Slider, IconButton, Box } from \"@material-ui/core\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n// import PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\n// import PauseIcon from \"@material-ui/icons/Pause\";\r\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\r\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\r\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    // minHeight: \"60vh\",\r\n  },\r\n  playBtn: {\r\n    width: \"20%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"15%\",\r\n    },\r\n  },\r\n  slider: {\r\n    width: \"60%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"40%\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Player = ({ currentSong, isPlaying, setIsPlaying }) => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n  const [songInfo, setSongInfo] = React.useState({\r\n    currentTime: 0,\r\n    duration: 0,\r\n  });\r\n  const audioRef = React.useRef(null);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n    audioRef.current.currentTime = newValue;\r\n    // setSongInfo({ ...songInfo, currentTime: newValue });\r\n  };\r\n\r\n  const playSongHandler = () => {\r\n    if (isPlaying) {\r\n      audioRef.current.pause();\r\n    } else {\r\n      audioRef.current.play();\r\n    }\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  const timeUpdateHandler = (e) => {\r\n    const currentTime = e.target.currentTime;\r\n    const duration = e.target.duration;\r\n    setSongInfo({ ...songInfo, currentTime: currentTime, duration });\r\n  };\r\n\r\n  const getTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Box>\r\n          <Typography>{getTime(songInfo.currentTime)}</Typography>\r\n        </Box>\r\n        <Box ml={3} mr={3} className={classes.slider}>\r\n          <Slider\r\n            min={0}\r\n            max={songInfo.duration}\r\n            value={value}\r\n            onChange={handleChange}\r\n            aria-labelledby=\"continuous-slider\"\r\n          />\r\n        </Box>\r\n        <Box>\r\n          <Typography>{getTime(songInfo.duration)}</Typography>\r\n        </Box>\r\n      </Grid>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Box>\r\n          <IconButton color=\"inherit\">\r\n            <SkipPreviousIcon fontSize=\"large\" />\r\n          </IconButton>\r\n        </Box>\r\n        <Box className={classes.playBtn}>\r\n          <IconButton color=\"inherit\" onClick={playSongHandler}>\r\n            {isPlaying ? (\r\n              <PauseCircleOutlineIcon fontSize=\"large\" />\r\n            ) : (\r\n              <PlayCircleOutlineIcon fontSize=\"large\" />\r\n            )}\r\n          </IconButton>\r\n        </Box>\r\n        <Box>\r\n          <IconButton color=\"inherit\">\r\n            <SkipNextIcon fontSize=\"large\" />\r\n          </IconButton>\r\n        </Box>\r\n      </Grid>\r\n      <audio\r\n        onTimeUpdate={timeUpdateHandler}\r\n        onLoadedMetadata={timeUpdateHandler}\r\n        ref={audioRef}\r\n        src={currentSong.audio}\r\n      ></audio>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","D:\\Github\\music-player\\src\\components\\Song.js",["40","41"],"import React from \"react\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n// import Paper from \"@material-ui/core/Paper\";\r\nimport { Grid, Box, Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    margin: 0,\r\n    padding: 0,\r\n    boxSizing: \"border-box\",\r\n    minHeight: \"50vh\",\r\n    flexFlow: 1,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  songImg: {\r\n    borderRadius: \"50%\",\r\n  },\r\n  typography: {\r\n    color: \"#323232\",\r\n  },\r\n});\r\n\r\nconst Song = ({ currentSong }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container justify=\"center\" alignItems=\"center\">\r\n        <Grid\r\n          container\r\n          item\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          direction=\"column\"\r\n        >\r\n          <Box mt={10} mb={5}>\r\n            <img\r\n              src={currentSong.cover}\r\n              alt={currentSong.name}\r\n              className={classes.songImg}\r\n              width=\"250px\"\r\n            />\r\n          </Box>\r\n          <Box mb={2}>\r\n            {\" \"}\r\n            <Typography variant=\"h5\" className={classes.typography}>\r\n              {currentSong.name}\r\n            </Typography>\r\n          </Box>\r\n          <Box mb={5}>\r\n            {\" \"}\r\n            <Typography variant=\"subtitle1\" className={classes.typography}>\r\n              {currentSong.artist}\r\n            </Typography>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Song;\r\n","D:\\Github\\music-player\\src\\util.js",[],"D:\\Github\\music-player\\src\\components\\Library.js",["42","43","44"],"D:\\Github\\music-player\\src\\components\\LibrarySong.js",["45","46","47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":11,"column":17,"nodeType":"54","messageId":"55","endLine":11,"endColumn":25},{"ruleId":"52","severity":1,"message":"56","line":12,"column":23,"nodeType":"54","messageId":"55","endLine":12,"endColumn":37},{"ruleId":"52","severity":1,"message":"57","line":3,"column":22,"nodeType":"54","messageId":"55","endLine":3,"endColumn":34},{"ruleId":"52","severity":1,"message":"58","line":3,"column":36,"nodeType":"54","messageId":"55","endLine":3,"endColumn":41},{"ruleId":"52","severity":1,"message":"57","line":2,"column":22,"nodeType":"54","messageId":"55","endLine":2,"endColumn":34},{"ruleId":"52","severity":1,"message":"58","line":2,"column":36,"nodeType":"54","messageId":"55","endLine":2,"endColumn":41},{"ruleId":"52","severity":1,"message":"57","line":3,"column":22,"nodeType":"54","messageId":"55","endLine":3,"endColumn":34},{"ruleId":"52","severity":1,"message":"58","line":3,"column":36,"nodeType":"54","messageId":"55","endLine":3,"endColumn":41},{"ruleId":"52","severity":1,"message":"59","line":5,"column":10,"nodeType":"54","messageId":"55","endLine":5,"endColumn":14},{"ruleId":"52","severity":1,"message":"57","line":2,"column":22,"nodeType":"54","messageId":"55","endLine":2,"endColumn":34},{"ruleId":"52","severity":1,"message":"58","line":2,"column":36,"nodeType":"54","messageId":"55","endLine":2,"endColumn":41},{"ruleId":"52","severity":1,"message":"59","line":4,"column":10,"nodeType":"54","messageId":"55","endLine":4,"endColumn":14},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'setSongs' is assigned a value but never used.","Identifier","unusedVar","'setCurrentSong' is assigned a value but never used.","'createStyles' is defined but never used.","'Theme' is defined but never used.","'Grid' is defined but never used.","no-global-assign","no-unsafe-negation"]